"""
Django settings for autolife project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import datetime
import os
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# JWT Token related constants
JWT_TOKEN_TIME_SPAN = 3000
JWT_REFRESH_TIME_SPAN = 3000

# Nose to run tests
TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Custom user model
AUTH_USER_MODEL = 'users.Profile'
ADMINS = [('vishal', 'vishal.a@smartbuzz.net'), ('support', 'support@gnr8r.ca')]

# DATABASE_ROUTERS = ['autolife.db_routers.AutolifeRouter']

# Swagger settings
SWAGGER_SETTINGS = {
	"exclude_namespaces": [], # List URL namespaces to ignore
	"api_version": '0.1',  # Specify your API's version
	"api_path": "/",  # Specify the path to your API not a root level
	"enabled_methods": [  # Specify which methods to enable in Swagger UI
		'get',
		'post',
		'put',
		'patch',
		'delete'
	],
	"api_key": '', # An API key
	"is_authenticated": False,  # Set to True to enforce user authentication,
	"is_superuser": False,  # Set to True to enforce admin only access
}

# Application definition

INSTALLED_APPS = [
	# Allow Access Origin
	'corsheaders',
	'jet.dashboard',
	'jet',
	#'suit',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django_nose',
	# Custom Apps
	'core',
	'tags',
	'users',
	'questionnaire',
	'marketplace',
	'regions',
	'content_manager',
	'vehicles',
	'analytics',
	'ui_controllers',
	'import_export',
	# rest-swagger
	'rest_framework_swagger',



	# aws storaqes
	'storages',
	# 'aws_xray_sdk.ext.django',

	# Other Apps
	'oauth2_provider',
	'rest_framework',
	'social_django',
	'rest_framework_social_oauth2',




]

DJANGORESIZED_DEFAULT_SIZE = [300, 180]
DJANGORESIZED_DEFAULT_QUALITY = 75
DJANGORESIZED_DEFAULT_KEEP_META = True
DJANGORESIZED_DEFAULT_FORCE_FORMAT = 'JPEG'
DJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {'JPEG': ".jpg"}
DJANGORESIZED_DEFAULT_NORMALIZE_ROTATION = True

MIDDLEWARE = [
	# 'aws_xray_sdk.ext.django.middleware.XRayMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',  # django admin
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'autolife.middlewares.authentication_middleware.AuthenticationMiddlewareJWT',
	'autolife.middlewares.analytics_middleware.AnalyticsMiddleware',
]

XRAY_RECORDER = {
	'AUTO_INSTRUMENT': True,  # If turned on built-in database queries and template rendering will be recorded as subsegments
	'AWS_XRAY_CONTEXT_MISSING': 'LOG_ERROR',
	'SAMPLING': True,
	'SAMPLING_RULES': None,
	'AWS_XRAY_TRACING_NAME': 'Autolife Site', # the segment name for segments generated from incoming requests
	'DYNAMIC_NAMING': None, # defines a pattern that host names should match
	'STREAMING_THRESHOLD': None, # defines when a segment starts to stream out its children subsegments
}

ROOT_URLCONF = 'autolife.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [
			os.path.join(BASE_DIR, 'templates'),
			os.path.join(BASE_DIR, 'analytics/templates'),
			os.path.join(BASE_DIR, 'ui_controllers/templates'),
		],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
				'social_django.context_processors.backends',
				'social_django.context_processors.login_redirect',
			],
		},
	},
]

WSGI_APPLICATION = 'autolife.wsgi.application'

CORS_ORIGIN_ALLOW_ALL = True

# JWT settings
REST_FRAMEWORK = {
	'DEFAULT_PERMISSION_CLASSES': (
		'rest_framework.permissions.IsAuthenticated',
	),
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
		'rest_framework_social_oauth2.authentication.SocialAuthentication',
		'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
		'rest_framework.authentication.SessionAuthentication',
		'rest_framework.authentication.BasicAuthentication',
	),

}

# JWT Settings
JWT_AUTH = {
	'JWT_ENCODE_HANDLER':
		'rest_framework_jwt.utils.jwt_encode_handler',

	'JWT_DECODE_HANDLER':
		'rest_framework_jwt.utils.jwt_decode_handler',

	'JWT_PAYLOAD_HANDLER':
		'rest_framework_jwt.utils.jwt_payload_handler',

	'JWT_PAYLOAD_GET_USER_ID_HANDLER':
		'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

	'JWT_RESPONSE_PAYLOAD_HANDLER':
		'rest_framework_jwt.utils.jwt_response_payload_handler',

	'JWT_SECRET_KEY': SECRET_KEY,
	'JWT_GET_USER_SECRET_KEY': None,
	'JWT_PUBLIC_KEY': None,
	'JWT_PRIVATE_KEY': None,
	'JWT_ALGORITHM': 'HS256',
	'JWT_VERIFY': True,
	'JWT_VERIFY_EXPIRATION': True,
	'JWT_LEEWAY': 0,
	'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=JWT_TOKEN_TIME_SPAN),
	'JWT_AUDIENCE': None,
	'JWT_ISSUER': None,
	'JWT_ALLOW_REFRESH': True,
	'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(minutes=JWT_REFRESH_TIME_SPAN),
	'JWT_AUTH_HEADER_PREFIX': 'AL',
	'JWT_AUTH_COOKIE': None,

}

# Social Login Authentication Backends
AUTHENTICATION_BACKENDS = (
	'social_core.backends.facebook.FacebookAppOAuth2',
	'social_core.backends.facebook.FacebookOAuth2',
	'social_core.backends.google.GoogleOAuth2',
	'django.contrib.auth.backends.ModelBackend',
	'rest_framework_social_oauth2.backends.DjangoOAuth2',

	# and maybe some others ...

)

# Django Custom Theme Configuration
SUIT_CONFIG = {
	# header
	'ADMIN_NAME': 'Autolife Admin',
	# 'HEADER_DATE_FORMAT': 'l, j. F Y',
	# 'HEADER_TIME_FORMAT': 'H:i',

	# forms
	# 'SHOW_REQUIRED_ASTERISK': True,  # Default True
	# 'CONFIRM_UNSAVED_CHANGES': True, # Default True

	# menu
	# 'SEARCH_URL': '/admin/auth/user/',
	# 'MENU_ICONS': {
	#    'sites': 'icon-leaf',
	#    'auth': 'icon-lock',
	# },
	# 'MENU_OPEN_FIRST_CHILD': True, # Default True
	# 'MENU_EXCLUDE': ('auth.group',),
	# 'MENU': (
	#     'sites',
	#     {'app': 'auth', 'icon':'icon-lock', 'models': ('user', 'group')},
	#     {'label': 'Settings', 'icon':'icon-cog', 'models': ('auth.user', 'auth.group')},
	#     {'label': 'Support', 'icon':'icon-question-sign', 'url': '/support/'},
	# ),

	# misc
	# 'LIST_PER_PAGE': 15
}

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

EMAIL_HOST_USER = None

MIDDLEWARE += [
	'django.middleware.locale.LocaleMiddleware',
]  # For localisation

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

NOSE_ARGS = [
	'--with-coverage',
	'--with-xunit',
	'--cover-xml',
	'--cover-inclusive',
]

STATICFILES_DIRS = (
	os.path.join(BASE_DIR, 'analytics/static'),
)


# CELERY STUFF
BROKER_URL = os.getenv("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'A'


# Mail Chimp settings
MAILCHIMP_API_KEY = os.getenv("MAILCHIMP_API_KEY")
MAILCHIMP_LIST_ID = os.getenv("MAILCHIMP_LIST_ID")
MAILCHIMP_USER = os.getenv("MAILCHIMP_USER")

# Redis Cache settings
CACHES = {
	"default": {
		"BACKEND": "django_redis.cache.RedisCache",
		"LOCATION": os.getenv("CACHE_LOCATION"),
		"OPTIONS": {
			"CLIENT_CLASS": "django_redis.client.DefaultClient",
		}
	}
}

FILE_UPLOAD_PERMISSIONS = 0o777

# Cache settings
DJANGO_REDIS_IGNORE_EXCEPTIONS = True
CACHE_TIMEOUT = 86400/2


# SECURE_SSL_REDIRECT = True
# Importing local settings
try:
	from .local_settings import *
except ImportError as e:
	pass

#cbb.py url
base_url2 = "http://xml.canadianblackbook.com/XMLWebServices/service?"
RECALL_ENDPOINT = 'http://data.tc.gc.ca/v1.3/api/eng/vehicle-recall-database'

EVOX_BASE_URL = 'http://evox-api-dev.us-west-2.elasticbeanstalk.com/api/v1'
EVOX_X_API_KEY = 'KyxcfU3tqycJeEmRL25gpYWUTPr2svVD'